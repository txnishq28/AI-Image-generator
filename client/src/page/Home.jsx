import React, { useEffect, useState } from "react";
import { Card, FormField, Loader } from "../components";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-gray-400 text-lg text-center">
      {title}
    </h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]); // ✅ start as empty array
  const [searchText, setSearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState([]);

  // Fetch posts
  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch("http://localhost:9000/api/v1/post");
      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      console.error("❌ Error fetching posts:", err);
      alert("Failed to load posts. Check backend.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  // Handle search with debounce
  useEffect(() => {
    if (searchText.trim() === "") {
      setSearchedResults([]);
      return;
    }

    const timeout = setTimeout(() => {
      const searchResult = allPosts.filter(
        (item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase())
      );
      setSearchedResults(searchResult);
    }, 500);

    return () => clearTimeout(timeout);
  }, [searchText, allPosts]);

  return (
    <section className="max-w-7xl mx-auto px-4">
      {/* Header */}
      <div>
        <h1 className="font-extrabold text-white text-3xl md:text-4xl">
          🚀 The Community Showcase
        </h1>
        <p className="mt-2 text-gray-400 text-sm md:text-base max-w-lg">
          Browse through a collection of imaginative and visually stunning images
          generated by Vault AI.
        </p>
      </div>

      {/* Search Bar */}
      <div className="mt-12">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="🔍 Search something..."
          value={searchText}
          handleChange={(e) => setSearchText(e.target.value)}
        />
      </div>

      {/* Posts */}
      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-gray-300 text-lg mb-4">
                Showing results for{" "}
                <span className="text-indigo-400">{searchText}</span>
              </h2>
            )}

            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-5">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="❌ No search results found"
                />
              ) : (
                <RenderCards data={allPosts} title="No posts yet 😢" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
